 
services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - ../.env.development
    environment:
      POSTGRES_USER: ${DB_USER:-pos_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pos_password}
      POSTGRES_DB: ${DB_NAME:-pos_db}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - devnet

  studio:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    working_dir: /workspace
    env_file:
      - ../.env.development
    environment:
      DATABASE_URL: postgres://${DB_USER:-pos_user}:${DB_PASSWORD:-pos_password}@db:5432/${DB_NAME:-pos_db}
    command: sh -lc "npx prisma studio --schema backend/prisma/schema.prisma --hostname 0.0.0.0 --port 5555"
    volumes:
      - ..:/workspace:cached
    ports:
      - "5555:5555"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - devnet

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - devnet

  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    working_dir: /workspace
    env_file:
      - ../.env.development
    environment:
      # Ensure backend loads the intended env file and connects to in-network services
      DOTENV_CONFIG_PATH: /workspace/.env.development
      DATABASE_URL: postgres://${DB_USER:-pos_user}:${DB_PASSWORD:-pos_password}@db:5432/${DB_NAME:-pos_db}
      REDIS_URL: redis://redis:6379
      BACKEND_PORT: ${BACKEND_PORT:-4000}
      PORT: ${BACKEND_PORT:-4000}
      # CORS: allow frontend and enable credentials (required for withCredentials)
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      CORS_CREDENTIALS: 'true'
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
    command: sh -c "npm ci && npm run dev:backend"
    volumes:
      - ..:/workspace:cached
      - backend_root_node_modules:/workspace/node_modules
      - backend_workspace_node_modules:/workspace/backend/node_modules
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devnet

  frontend:
    image: node:18-alpine
    working_dir: /workspace
    env_file:
      - ../.env.development
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:4000}
      FRONTEND_PORT: ${FRONTEND_PORT:-3000}
    command: sh -c "npm install && npm run dev:frontend"
    volumes:
      - ..:/workspace:cached
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_started
    networks:
      - devnet

volumes:
  pgdata:
  redisdata:
  backend_root_node_modules:
  backend_workspace_node_modules:

networks:
  devnet:
